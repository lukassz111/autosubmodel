export declare const AnnotationFactory: unique symbol;
export declare type AnnotationFactory<T> = (...args: any[]) => Annotation<T>;
export declare type Target = any;
export declare type MaybeAnnotationFactory = any;
export declare function isAnnotationFactory(thing: MaybeAnnotationFactory): thing is (...args: any[]) => Annotation<any>;
export interface Constructor<T> {
    new (...args: any[]): T;
}
export interface Constructor0<T> {
    new (): T;
}
export interface Constructor1<T, A1> {
    new (a1: A1): T;
}
export interface Constructor2<T, A1, A2> {
    new (a1: A1, a2: A2): T;
}
export interface Constructor3<T, A1, A2, A3> {
    new (a1: A1, a2: A2, a3: A3): T;
}
export interface Constructor4<T, A1, A2, A3, A4> {
    new (a1: A1, a2: A2, a3: A3, a4: A4): T;
}
export interface Constructor5<T, A1, A2, A3, A4, A5> {
    new (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): T;
}
export interface Constructor6<T, A1, A2, A3, A4, A5, A6> {
    new (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): T;
}
export interface Constructor7<T, A1, A2, A3, A4, A5, A6, A7> {
    new (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): T;
}
export interface Constructor8<T, A1, A2, A3, A4, A5, A6, A7, A8> {
    new (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): T;
}
export interface Constructor9<T, A1, A2, A3, A4, A5, A6, A7, A8, A9> {
    new (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9): T;
}
export declare function getAnnotations(target: Target, key?: string | symbol): Array<any>;
export declare function setAnnotations(target: Target, key?: string | symbol, annotations?: Array<any>): void;
export declare function getParameterAnnotations(target: Target, key: string | symbol): Array<any>;
export declare function setParameterAnnotations(target: Target, key: string | symbol, annotations: Array<any>): void;
export declare function getParameterTypes(target: Target, key: string | symbol): Array<any> | undefined;
export declare function getReturnType(target: Target, key: string | symbol): Array<any> | undefined;
export declare type Annotation<T = any> = ClassDecorator & MethodDecorator & ParameterDecorator & {
    annotationInstance: T;
};
export declare function createAnnotationFactory<T>(Type: Constructor0<T>): () => Annotation<T>;
export declare function createAnnotationFactory<T, A1>(Type: Constructor1<T, A1>): (a1: A1) => Annotation<T>;
export declare function createAnnotationFactory<T, A1, A2>(Type: Constructor2<T, A1, A2>): (a1: A1, a2: A2) => Annotation<T>;
export declare function createAnnotationFactory<T, A1, A2, A3>(Type: Constructor3<T, A1, A2, A3>): (a1: A1, a2: A2, a3: A3) => Annotation<T>;
export declare function createAnnotationFactory<T, A1, A2, A3, A4>(Type: Constructor4<T, A1, A2, A3, A4>): (a1: A1, a2: A2, a3: A3, a4: A4) => Annotation<T>;
export declare function createAnnotationFactory<T, A1, A2, A3, A4, A5>(Type: Constructor5<T, A1, A2, A3, A4, A5>): (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5) => Annotation<T>;
export declare function createAnnotationFactory<T, A1, A2, A3, A4, A5, A6>(Type: Constructor6<T, A1, A2, A3, A4, A5, A6>): (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6) => Annotation<T>;
export declare function createAnnotationFactory<T, A1, A2, A3, A4, A5, A6, A7>(Type: Constructor7<T, A1, A2, A3, A4, A5, A6, A7>): (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7) => Annotation<T>;
export declare function createAnnotationFactory<T, A1, A2, A3, A4, A5, A6, A7, A8>(Type: Constructor8<T, A1, A2, A3, A4, A5, A6, A7, A8>): (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8) => Annotation<T>;
export declare function createAnnotationFactory<T, A1, A2, A3, A4, A5, A6, A7, A8, A9>(Type: Constructor9<T, A1, A2, A3, A4, A5, A6, A7, A8, A9>): (a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8, a9: A9) => Annotation<T>;
export declare function createAnnotationFactory<T>(Type: Constructor<T>): AnnotationFactory<T>;
