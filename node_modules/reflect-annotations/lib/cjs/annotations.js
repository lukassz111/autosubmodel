"use strict";
///<reference types="reflect-metadata"/>
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnnotationFactory = exports.getReturnType = exports.getParameterTypes = exports.setParameterAnnotations = exports.getParameterAnnotations = exports.setAnnotations = exports.getAnnotations = exports.isAnnotationFactory = exports.AnnotationFactory = void 0;
const ANNOTATIONS = 'annotations', PARAMETER_ANNOTATIONS = 'parameter-annotations', PARAMETER_TYPES = 'design:paramtypes', RETURN_TYPE = 'design:returntype';
exports.AnnotationFactory = Symbol.for('reflect-annotations.factory');
function isAnnotationFactory(thing) {
    return typeof thing === 'function' && thing[exports.AnnotationFactory] === true;
}
exports.isAnnotationFactory = isAnnotationFactory;
function getAnnotations(target, key) {
    return Reflect.getMetadata(ANNOTATIONS, target, key) || [];
}
exports.getAnnotations = getAnnotations;
function setAnnotations(target, key, annotations) {
    Reflect.defineMetadata(ANNOTATIONS, annotations || [], target, key);
}
exports.setAnnotations = setAnnotations;
function getParameterAnnotations(target, key) {
    const annotations = Reflect.getMetadata(PARAMETER_ANNOTATIONS, target, key);
    return annotations ? Array.from(annotations) : [];
}
exports.getParameterAnnotations = getParameterAnnotations;
function setParameterAnnotations(target, key, annotations) {
    Reflect.defineMetadata(PARAMETER_ANNOTATIONS, annotations, target, key);
}
exports.setParameterAnnotations = setParameterAnnotations;
function getParameterTypes(target, key) {
    return Reflect.getMetadata(PARAMETER_TYPES, target, key);
}
exports.getParameterTypes = getParameterTypes;
function getReturnType(target, key) {
    return Reflect.getMetadata(RETURN_TYPE, target, key);
}
exports.getReturnType = getReturnType;
function createAnnotationFactory(Type) {
    return Object.assign(function annotationFactory(...args) {
        const annotationInstance = new Type(...args), annotation = (target, key, descriptorOrParamIndex) => {
            if (key && typeof descriptorOrParamIndex === 'number') {
                const annotations = getParameterAnnotations(target, key);
                annotations[descriptorOrParamIndex] = annotationInstance;
                setParameterAnnotations(target, key, annotations);
            }
            else {
                const annotations = getAnnotations(target, key);
                annotations.push(annotationInstance);
                setAnnotations(target, key, annotations);
            }
        };
        annotation.annotationInstance = annotationInstance;
        return annotation;
    }, { [exports.AnnotationFactory]: true });
}
exports.createAnnotationFactory = createAnnotationFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3RhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYW5ub3RhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHdDQUF3Qzs7O0FBRXhDLE1BQU0sV0FBVyxHQUFHLGFBQWEsRUFDL0IscUJBQXFCLEdBQUcsdUJBQXVCLEVBQy9DLGVBQWUsR0FBRyxtQkFBbUIsRUFDckMsV0FBVyxHQUFHLG1CQUFtQixDQUFBO0FBRXRCLFFBQUEsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0FBSTFFLFNBQWdCLG1CQUFtQixDQUNqQyxLQUE2QjtJQUU3QixPQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsSUFBSSxLQUFLLENBQUMseUJBQWlCLENBQUMsS0FBSyxJQUFJLENBQUE7QUFDekUsQ0FBQztBQUpELGtEQUlDO0FBbUNELFNBQWdCLGNBQWMsQ0FBQyxNQUFjLEVBQUUsR0FBcUI7SUFDbEUsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsR0FBVSxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ25FLENBQUM7QUFGRCx3Q0FFQztBQUVELFNBQWdCLGNBQWMsQ0FDNUIsTUFBYyxFQUNkLEdBQXFCLEVBQ3JCLFdBQXdCO0lBRXhCLE9BQU8sQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLFdBQVcsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQVUsQ0FBQyxDQUFBO0FBQzVFLENBQUM7QUFORCx3Q0FNQztBQUVELFNBQWdCLHVCQUF1QixDQUFDLE1BQWMsRUFBRSxHQUFvQjtJQUMxRSxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUMzRSxPQUFPLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQ25ELENBQUM7QUFIRCwwREFHQztBQUVELFNBQWdCLHVCQUF1QixDQUNyQyxNQUFjLEVBQ2QsR0FBb0IsRUFDcEIsV0FBdUI7SUFFdkIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQ3pFLENBQUM7QUFORCwwREFNQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLE1BQWMsRUFBRSxHQUFvQjtJQUNwRSxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUMxRCxDQUFDO0FBRkQsOENBRUM7QUFFRCxTQUFnQixhQUFhLENBQUMsTUFBYyxFQUFFLEdBQW9CO0lBQ2hFLE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQ3RELENBQUM7QUFGRCxzQ0FFQztBQWlDRCxTQUFnQix1QkFBdUIsQ0FBSSxJQUFvQjtJQUM3RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQ2xCLFNBQVMsaUJBQWlCLENBQUMsR0FBRyxJQUFXO1FBQ3ZDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsRUFDMUMsVUFBVSxHQUFHLENBQ1gsTUFBVyxFQUNYLEdBQXFCLEVBQ3JCLHNCQUFvRCxFQUNwRCxFQUFFO1lBQ0YsSUFBSSxHQUFHLElBQUksT0FBTyxzQkFBc0IsS0FBSyxRQUFRLEVBQUU7Z0JBQ3JELE1BQU0sV0FBVyxHQUFHLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDeEQsV0FBVyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsa0JBQWtCLENBQUE7Z0JBQ3hELHVCQUF1QixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUE7YUFDbEQ7aUJBQU07Z0JBQ0wsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDL0MsV0FBVyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO2dCQUNwQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQTthQUN6QztRQUNILENBQUMsQ0FBQTtRQUNILFVBQVUsQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQTtRQUNsRCxPQUFPLFVBQVUsQ0FBQTtJQUNuQixDQUFDLEVBQ0QsRUFBRSxDQUFDLHlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQzlCLENBQUE7QUFDSCxDQUFDO0FBeEJELDBEQXdCQyJ9