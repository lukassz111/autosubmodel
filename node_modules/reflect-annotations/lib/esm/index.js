import { getAnnotations, setAnnotations, getParameterAnnotations, setParameterAnnotations, getParameterTypes, getReturnType, createAnnotationFactory, isAnnotationFactory, AnnotationFactory, } from './annotations.js';
import { reflectClassProperties } from './reflect-class.js';
class PropertyDescription {
    constructor(name, declaredOrder) {
        this.name = name;
        this.declaredOrder = declaredOrder;
        this.classAnnotations = [];
        this.methodAnnotations = [];
        this.parameterAnnotations = [];
        this.types = {};
    }
}
function addClassAnnotation(property, annotation) {
    property.classAnnotations.push(annotation);
    return property;
}
function addMethodAnnotation(property, annotation) {
    property.methodAnnotations.push(annotation);
    return property;
}
function collectPropertyAnnotations(property, ctor) {
    const methodAnnotations = property.name in ctor.prototype ? getAnnotations(ctor.prototype, property.name) : [], order = property.declaredOrder ? 'reduceRight' : 'reduce';
    property = getAnnotations(ctor)[order](addClassAnnotation, methodAnnotations[order](addMethodAnnotation, property));
    property.parameterAnnotations =
        property.name in ctor.prototype ? getParameterAnnotations(ctor.prototype, property.name) : [];
    property.types.parameters = getParameterTypes(ctor.prototype, property.name);
    property.types.return = getReturnType(ctor.prototype, property.name);
    return property;
}
function reflectAnnotations(source, options = { declaredOrder: true }) {
    const classMetadata = reflectClassProperties(source);
    return classMetadata.properties.reduce((properties, propertyName) => {
        properties.push(classMetadata.constructors.reduceRight(collectPropertyAnnotations, new PropertyDescription(propertyName, options.declaredOrder)));
        return properties;
    }, []);
}
export default reflectAnnotations;
export { reflectAnnotations };
export { getAnnotations, setAnnotations, getParameterAnnotations, setParameterAnnotations, createAnnotationFactory, isAnnotationFactory, AnnotationFactory, };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGNBQWMsRUFDZCxjQUFjLEVBQ2QsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsYUFBYSxFQUNiLHVCQUF1QixFQUV2QixtQkFBbUIsRUFFbkIsaUJBQWlCLEdBQ2xCLE1BQU0sa0JBQWtCLENBQUE7QUFDekIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFXM0QsTUFBTSxtQkFBbUI7SUFLdkIsWUFBbUIsSUFBWSxFQUFTLGFBQXNCO1FBQTNDLFNBQUksR0FBSixJQUFJLENBQVE7UUFBUyxrQkFBYSxHQUFiLGFBQWEsQ0FBUztRQUo5RCxxQkFBZ0IsR0FBZSxFQUFFLENBQUE7UUFDakMsc0JBQWlCLEdBQWUsRUFBRSxDQUFBO1FBQ2xDLHlCQUFvQixHQUFlLEVBQUUsQ0FBQTtRQUNyQyxVQUFLLEdBQUcsRUFBRSxDQUFBO0lBQ3VELENBQUM7Q0FDbkU7QUFFRCxTQUFTLGtCQUFrQixDQUFDLFFBQXNDLEVBQUUsVUFBZTtJQUNqRixRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzFDLE9BQU8sUUFBUSxDQUFBO0FBQ2pCLENBQUM7QUFDRCxTQUFTLG1CQUFtQixDQUFDLFFBQXNDLEVBQUUsVUFBZTtJQUNsRixRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzNDLE9BQU8sUUFBUSxDQUFBO0FBQ2pCLENBQUM7QUFFRCxTQUFTLDBCQUEwQixDQUNqQyxRQUFzQyxFQUN0QyxJQUFvQjtJQUVwQixNQUFNLGlCQUFpQixHQUNuQixRQUFRLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUN0RixLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUE7SUFDM0QsUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDcEMsa0JBQWtCLEVBQ2xCLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUErQixtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FDdEYsQ0FBQTtJQUNELFFBQVEsQ0FBQyxvQkFBb0I7UUFDM0IsUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0lBQy9GLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVFLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNwRSxPQUFPLFFBQVEsQ0FBQTtBQUNqQixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FDekIsTUFBc0IsRUFDdEIsVUFBc0MsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFO0lBRTdELE1BQU0sYUFBYSxHQUFHLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRXBELE9BQU8sYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQ3BDLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRSxFQUFFO1FBQzNCLFVBQVUsQ0FBQyxJQUFJLENBQ2IsYUFBYSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQ3BDLDBCQUEwQixFQUMxQixJQUFJLG1CQUFtQixDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQzdELENBQ0YsQ0FBQTtRQUNELE9BQU8sVUFBVSxDQUFBO0lBQ25CLENBQUMsRUFDRCxFQUFFLENBQ0gsQ0FBQTtBQUNILENBQUM7QUFFRCxlQUFlLGtCQUFrQixDQUFBO0FBRWpDLE9BQU8sRUFBRSxrQkFBa0IsRUFBNEMsQ0FBQTtBQUN2RSxPQUFPLEVBQ0wsY0FBYyxFQUNkLGNBQWMsRUFDZCx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2QixtQkFBbUIsRUFDbkIsaUJBQWlCLEdBQ2xCLENBQUEifQ==