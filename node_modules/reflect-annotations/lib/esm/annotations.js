///<reference types="reflect-metadata"/>
const ANNOTATIONS = 'annotations', PARAMETER_ANNOTATIONS = 'parameter-annotations', PARAMETER_TYPES = 'design:paramtypes', RETURN_TYPE = 'design:returntype';
export const AnnotationFactory = Symbol.for('reflect-annotations.factory');
export function isAnnotationFactory(thing) {
    return typeof thing === 'function' && thing[AnnotationFactory] === true;
}
export function getAnnotations(target, key) {
    return Reflect.getMetadata(ANNOTATIONS, target, key) || [];
}
export function setAnnotations(target, key, annotations) {
    Reflect.defineMetadata(ANNOTATIONS, annotations || [], target, key);
}
export function getParameterAnnotations(target, key) {
    const annotations = Reflect.getMetadata(PARAMETER_ANNOTATIONS, target, key);
    return annotations ? Array.from(annotations) : [];
}
export function setParameterAnnotations(target, key, annotations) {
    Reflect.defineMetadata(PARAMETER_ANNOTATIONS, annotations, target, key);
}
export function getParameterTypes(target, key) {
    return Reflect.getMetadata(PARAMETER_TYPES, target, key);
}
export function getReturnType(target, key) {
    return Reflect.getMetadata(RETURN_TYPE, target, key);
}
export function createAnnotationFactory(Type) {
    return Object.assign(function annotationFactory(...args) {
        const annotationInstance = new Type(...args), annotation = (target, key, descriptorOrParamIndex) => {
            if (key && typeof descriptorOrParamIndex === 'number') {
                const annotations = getParameterAnnotations(target, key);
                annotations[descriptorOrParamIndex] = annotationInstance;
                setParameterAnnotations(target, key, annotations);
            }
            else {
                const annotations = getAnnotations(target, key);
                annotations.push(annotationInstance);
                setAnnotations(target, key, annotations);
            }
        };
        annotation.annotationInstance = annotationInstance;
        return annotation;
    }, { [AnnotationFactory]: true });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3RhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYW5ub3RhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBRXhDLE1BQU0sV0FBVyxHQUFHLGFBQWEsRUFDL0IscUJBQXFCLEdBQUcsdUJBQXVCLEVBQy9DLGVBQWUsR0FBRyxtQkFBbUIsRUFDckMsV0FBVyxHQUFHLG1CQUFtQixDQUFBO0FBRW5DLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtBQUkxRSxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLEtBQTZCO0lBRTdCLE9BQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLElBQUksQ0FBQTtBQUN6RSxDQUFDO0FBbUNELE1BQU0sVUFBVSxjQUFjLENBQUMsTUFBYyxFQUFFLEdBQXFCO0lBQ2xFLE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUNuRSxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsTUFBYyxFQUNkLEdBQXFCLEVBQ3JCLFdBQXdCO0lBRXhCLE9BQU8sQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLFdBQVcsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQVUsQ0FBQyxDQUFBO0FBQzVFLENBQUM7QUFFRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsTUFBYyxFQUFFLEdBQW9CO0lBQzFFLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzNFLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7QUFDbkQsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FDckMsTUFBYyxFQUNkLEdBQW9CLEVBQ3BCLFdBQXVCO0lBRXZCLE9BQU8sQ0FBQyxjQUFjLENBQUMscUJBQXFCLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUN6RSxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLE1BQWMsRUFBRSxHQUFvQjtJQUNwRSxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUMxRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUFjLEVBQUUsR0FBb0I7SUFDaEUsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDdEQsQ0FBQztBQWlDRCxNQUFNLFVBQVUsdUJBQXVCLENBQUksSUFBb0I7SUFDN0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUNsQixTQUFTLGlCQUFpQixDQUFDLEdBQUcsSUFBVztRQUN2QyxNQUFNLGtCQUFrQixHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQzFDLFVBQVUsR0FBRyxDQUNYLE1BQVcsRUFDWCxHQUFxQixFQUNyQixzQkFBb0QsRUFDcEQsRUFBRTtZQUNGLElBQUksR0FBRyxJQUFJLE9BQU8sc0JBQXNCLEtBQUssUUFBUSxFQUFFO2dCQUNyRCxNQUFNLFdBQVcsR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUE7Z0JBQ3hELFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLGtCQUFrQixDQUFBO2dCQUN4RCx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFBO2FBQ2xEO2lCQUFNO2dCQUNMLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUE7Z0JBQy9DLFdBQVcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtnQkFDcEMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUE7YUFDekM7UUFDSCxDQUFDLENBQUE7UUFDSCxVQUFVLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUE7UUFDbEQsT0FBTyxVQUFVLENBQUE7SUFDbkIsQ0FBQyxFQUNELEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUM5QixDQUFBO0FBQ0gsQ0FBQyJ9